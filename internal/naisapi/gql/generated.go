// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// AddTeamMemberAddTeamMemberAddTeamMemberPayload includes the requested fields of the GraphQL type AddTeamMemberPayload.
type AddTeamMemberAddTeamMemberAddTeamMemberPayload struct {
	// The added team member.
	Member AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember `json:"member"`
}

// GetMember returns AddTeamMemberAddTeamMemberAddTeamMemberPayload.Member, and is useful for accessing the field via an interface.
func (v *AddTeamMemberAddTeamMemberAddTeamMemberPayload) GetMember() AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember {
	return v.Member
}

// AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember includes the requested fields of the GraphQL type TeamMember.
type AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember struct {
	// The role that the user has in the team.
	Role TeamMemberRole `json:"role"`
}

// GetRole returns AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember.Role, and is useful for accessing the field via an interface.
func (v *AddTeamMemberAddTeamMemberAddTeamMemberPayloadMemberTeamMember) GetRole() TeamMemberRole {
	return v.Role
}

// AddTeamMemberResponse is returned by AddTeamMember on success.
type AddTeamMemberResponse struct {
	// Add a team member
	//
	// If the user is already a member or an owner of the team, the mutation will result in an error.
	AddTeamMember AddTeamMemberAddTeamMemberAddTeamMemberPayload `json:"addTeamMember"`
}

// GetAddTeamMember returns AddTeamMemberResponse.AddTeamMember, and is useful for accessing the field via an interface.
func (v *AddTeamMemberResponse) GetAddTeamMember() AddTeamMemberAddTeamMemberAddTeamMemberPayload {
	return v.AddTeamMember
}

// GetTeamWorkloadsResponse is returned by GetTeamWorkloads on success.
type GetTeamWorkloadsResponse struct {
	// Get a team by its slug.
	Team GetTeamWorkloadsTeam `json:"team"`
}

// GetTeam returns GetTeamWorkloadsResponse.Team, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsResponse) GetTeam() GetTeamWorkloadsTeam { return v.Team }

// GetTeamWorkloadsTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type GetTeamWorkloadsTeam struct {
	// Nais workloads owned by the team.
	Workloads GetTeamWorkloadsTeamWorkloadsWorkloadConnection `json:"workloads"`
}

// GetWorkloads returns GetTeamWorkloadsTeam.Workloads, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeam) GetWorkloads() GetTeamWorkloadsTeamWorkloadsWorkloadConnection {
	return v.Workloads
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnection includes the requested fields of the GraphQL type WorkloadConnection.
// The GraphQL type's documentation follows.
//
// Workload connection.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnection struct {
	// List of nodes.
	Nodes []GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload `json:"-"`
}

// GetNodes returns GetTeamWorkloadsTeamWorkloadsWorkloadConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnection) GetNodes() []GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload {
	return v.Nodes
}

func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTeamWorkloadsTeamWorkloadsWorkloadConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTeamWorkloadsTeamWorkloadsWorkloadConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal GetTeamWorkloadsTeamWorkloadsWorkloadConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalGetTeamWorkloadsTeamWorkloadsWorkloadConnection struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnection) __premarshalJSON() (*__premarshalGetTeamWorkloadsTeamWorkloadsWorkloadConnection, error) {
	var retval __premarshalGetTeamWorkloadsTeamWorkloadsWorkloadConnection

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetTeamWorkloadsTeamWorkloadsWorkloadConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication includes the requested fields of the GraphQL type Application.
// The GraphQL type's documentation follows.
//
// An application lets you run one or more instances of a container image on the [Nais platform](https://nais.io/).
//
// Learn more about how to create and configure your applications in the [Nais documentation](https://docs.nais.io/workloads/application/).
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication struct {
	Typename string `json:"__typename"`
	// Interface for workloads.
	Name string `json:"name"`
	// Interface for workloads.
	Status GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus `json:"status"`
	// Interface for workloads.
	Image GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage `json:"image"`
	// Interface for workloads.
	TeamEnvironment GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment `json:"teamEnvironment"`
}

// GetTypename returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication.Typename, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) GetTypename() string {
	return v.Typename
}

// GetName returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication.Name, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) GetName() string {
	return v.Name
}

// GetStatus returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication.Status, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) GetStatus() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus {
	return v.Status
}

// GetImage returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication.Image, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) GetImage() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage {
	return v.Image
}

// GetTeamEnvironment returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication.TeamEnvironment, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) GetTeamEnvironment() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment {
	return v.TeamEnvironment
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob includes the requested fields of the GraphQL type Job.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob struct {
	Typename string `json:"__typename"`
	// Interface for workloads.
	Name string `json:"name"`
	// Interface for workloads.
	Status GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus `json:"status"`
	// Interface for workloads.
	Image GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage `json:"image"`
	// Interface for workloads.
	TeamEnvironment GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment `json:"teamEnvironment"`
}

// GetTypename returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob.Typename, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) GetTypename() string {
	return v.Typename
}

// GetName returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob.Name, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) GetName() string { return v.Name }

// GetStatus returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob.Status, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) GetStatus() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus {
	return v.Status
}

// GetImage returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob.Image, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) GetImage() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage {
	return v.Image
}

// GetTeamEnvironment returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob.TeamEnvironment, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) GetTeamEnvironment() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment {
	return v.TeamEnvironment
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload includes the requested fields of the GraphQL interface Workload.
//
// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload is implemented by the following types:
// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication
// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob
// The GraphQL type's documentation follows.
//
// Interface for workloads.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload interface {
	implementsGraphQLInterfaceGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetName() string
	// GetStatus returns the interface-field "status" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetStatus() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus
	// GetImage returns the interface-field "image" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetImage() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage
	// GetTeamEnvironment returns the interface-field "teamEnvironment" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetTeamEnvironment() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment
}

func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication) implementsGraphQLInterfaceGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload() {
}
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob) implementsGraphQLInterfaceGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload() {
}

func __unmarshalGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload(b []byte, v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Workload.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload: "%v"`, tn.TypeName)
	}
}

func __marshalGetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload(v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesApplication
		}{typename, v}
		return json.Marshal(result)
	case *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesJob
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkload: "%T"`, v)
	}
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage includes the requested fields of the GraphQL type ContainerImage.
// The GraphQL type's documentation follows.
//
// Container image.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage struct {
	// Get the summary of the vulnerabilities of the image.
	VulnerabilitySummary GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary `json:"vulnerabilitySummary"`
}

// GetVulnerabilitySummary returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage.VulnerabilitySummary, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImage) GetVulnerabilitySummary() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary {
	return v.VulnerabilitySummary
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary includes the requested fields of the GraphQL type ImageVulnerabilitySummary.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary struct {
	// Total number of vulnerabilities.
	Total int `json:"total"`
}

// GetTotal returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary.Total, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadImageContainerImageVulnerabilitySummary) GetTotal() int {
	return v.Total
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus includes the requested fields of the GraphQL type WorkloadStatus.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus struct {
	// State of the workload
	State WorkloadState `json:"state"`
}

// GetState returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus.State, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadStatus) GetState() WorkloadState {
	return v.State
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment includes the requested fields of the GraphQL type TeamEnvironment.
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment struct {
	// Get the environment.
	Environment GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment `json:"environment"`
}

// GetEnvironment returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment.Environment, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironment) GetEnvironment() GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment {
	return v.Environment
}

// GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// An environment represents a runtime environment for workloads.
//
// Learn more in the [official Nais documentation](https://docs.nais.io/workloads/explanations/environment/).
type GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment struct {
	// Unique name of the environment.
	Name string `json:"name"`
}

// GetName returns GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GetTeamWorkloadsTeamWorkloadsWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment) GetName() string {
	return v.Name
}

// IsAdminMeAuthenticatedUser includes the requested fields of the GraphQL interface AuthenticatedUser.
//
// IsAdminMeAuthenticatedUser is implemented by the following types:
// IsAdminMeServiceAccount
// IsAdminMeUser
// The GraphQL type's documentation follows.
//
// Authenticated user type.
type IsAdminMeAuthenticatedUser interface {
	implementsGraphQLInterfaceIsAdminMeAuthenticatedUser()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *IsAdminMeServiceAccount) implementsGraphQLInterfaceIsAdminMeAuthenticatedUser() {}
func (v *IsAdminMeUser) implementsGraphQLInterfaceIsAdminMeAuthenticatedUser()           {}

func __unmarshalIsAdminMeAuthenticatedUser(b []byte, v *IsAdminMeAuthenticatedUser) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ServiceAccount":
		*v = new(IsAdminMeServiceAccount)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(IsAdminMeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AuthenticatedUser.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for IsAdminMeAuthenticatedUser: "%v"`, tn.TypeName)
	}
}

func __marshalIsAdminMeAuthenticatedUser(v *IsAdminMeAuthenticatedUser) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *IsAdminMeServiceAccount:
		typename = "ServiceAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*IsAdminMeServiceAccount
		}{typename, v}
		return json.Marshal(result)
	case *IsAdminMeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*IsAdminMeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for IsAdminMeAuthenticatedUser: "%T"`, v)
	}
}

// IsAdminMeServiceAccount includes the requested fields of the GraphQL type ServiceAccount.
// The GraphQL type's documentation follows.
//
// The service account type represents machine-users of the Nais API.
//
// These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.
//
// Service accounts are created using the `createServiceAccount` mutation, and authenticate using tokens generated by the `createServiceAccountToken` mutation.
type IsAdminMeServiceAccount struct {
	Typename string `json:"__typename"`
}

// GetTypename returns IsAdminMeServiceAccount.Typename, and is useful for accessing the field via an interface.
func (v *IsAdminMeServiceAccount) GetTypename() string { return v.Typename }

// IsAdminMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type IsAdminMeUser struct {
	Typename string `json:"__typename"`
	// True if the user is global admin.
	IsAdmin bool `json:"isAdmin"`
}

// GetTypename returns IsAdminMeUser.Typename, and is useful for accessing the field via an interface.
func (v *IsAdminMeUser) GetTypename() string { return v.Typename }

// GetIsAdmin returns IsAdminMeUser.IsAdmin, and is useful for accessing the field via an interface.
func (v *IsAdminMeUser) GetIsAdmin() bool { return v.IsAdmin }

// IsAdminResponse is returned by IsAdmin on success.
type IsAdminResponse struct {
	// The currently authenticated user.
	Me IsAdminMeAuthenticatedUser `json:"-"`
}

// GetMe returns IsAdminResponse.Me, and is useful for accessing the field via an interface.
func (v *IsAdminResponse) GetMe() IsAdminMeAuthenticatedUser { return v.Me }

func (v *IsAdminResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IsAdminResponse
		Me json.RawMessage `json:"me"`
		graphql.NoUnmarshalJSON
	}
	firstPass.IsAdminResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Me
		src := firstPass.Me
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalIsAdminMeAuthenticatedUser(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal IsAdminResponse.Me: %w", err)
			}
		}
	}
	return nil
}

type __premarshalIsAdminResponse struct {
	Me json.RawMessage `json:"me"`
}

func (v *IsAdminResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IsAdminResponse) __premarshalJSON() (*__premarshalIsAdminResponse, error) {
	var retval __premarshalIsAdminResponse

	{

		dst := &retval.Me
		src := v.Me
		var err error
		*dst, err = __marshalIsAdminMeAuthenticatedUser(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal IsAdminResponse.Me: %w", err)
		}
	}
	return &retval, nil
}

// RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload includes the requested fields of the GraphQL type RemoveTeamMemberPayload.
type RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload struct {
	// The team that the member was removed from.
	Team RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam `json:"team"`
}

// GetTeam returns RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload.Team, and is useful for accessing the field via an interface.
func (v *RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload) GetTeam() RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam {
	return v.Team
}

// RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam struct {
	// Unique slug of the team.
	Slug string `json:"slug"`
}

// GetSlug returns RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam.Slug, and is useful for accessing the field via an interface.
func (v *RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayloadTeam) GetSlug() string { return v.Slug }

// RemoveTeamMemberResponse is returned by RemoveTeamMember on success.
type RemoveTeamMemberResponse struct {
	// Remove a team member
	//
	// If the user is not already a member or an owner of the team, the mutation will result in an error.
	RemoveTeamMember RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload `json:"removeTeamMember"`
}

// GetRemoveTeamMember returns RemoveTeamMemberResponse.RemoveTeamMember, and is useful for accessing the field via an interface.
func (v *RemoveTeamMemberResponse) GetRemoveTeamMember() RemoveTeamMemberRemoveTeamMemberRemoveTeamMemberPayload {
	return v.RemoveTeamMember
}

// Team member roles.
type TeamMemberRole string

const (
	// Regular member, read only access.
	TeamMemberRoleMember TeamMemberRole = "MEMBER"
	// Team owner, full access to the team.
	TeamMemberRoleOwner TeamMemberRole = "OWNER"
)

var AllTeamMemberRole = []TeamMemberRole{
	TeamMemberRoleMember,
	TeamMemberRoleOwner,
}

// TeamMembersResponse is returned by TeamMembers on success.
type TeamMembersResponse struct {
	// Get a team by its slug.
	Team TeamMembersTeam `json:"team"`
}

// GetTeam returns TeamMembersResponse.Team, and is useful for accessing the field via an interface.
func (v *TeamMembersResponse) GetTeam() TeamMembersTeam { return v.Team }

// TeamMembersTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type TeamMembersTeam struct {
	// Team members.
	Members TeamMembersTeamMembersTeamMemberConnection `json:"members"`
}

// GetMembers returns TeamMembersTeam.Members, and is useful for accessing the field via an interface.
func (v *TeamMembersTeam) GetMembers() TeamMembersTeamMembersTeamMemberConnection { return v.Members }

// TeamMembersTeamMembersTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
type TeamMembersTeamMembersTeamMemberConnection struct {
	// List of nodes.
	Nodes []TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember `json:"nodes"`
}

// GetNodes returns TeamMembersTeamMembersTeamMemberConnection.Nodes, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberConnection) GetNodes() []TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember {
	return v.Nodes
}

// TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember includes the requested fields of the GraphQL type TeamMember.
type TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember struct {
	// The role that the user has in the team.
	Role TeamMemberRole `json:"role"`
	// User instance.
	User TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser `json:"user"`
}

// GetRole returns TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember.Role, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember) GetRole() TeamMemberRole {
	return v.Role
}

// GetUser returns TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember.User, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberConnectionNodesTeamMember) GetUser() TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser {
	return v.User
}

// TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser struct {
	// The full name of the user.
	Name string `json:"name"`
	// The email address of the user.
	Email string `json:"email"`
}

// GetName returns TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser.Name, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser) GetName() string {
	return v.Name
}

// GetEmail returns TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser.Email, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberConnectionNodesTeamMemberUser) GetEmail() string {
	return v.Email
}

// TeamStatusMeAuthenticatedUser includes the requested fields of the GraphQL interface AuthenticatedUser.
//
// TeamStatusMeAuthenticatedUser is implemented by the following types:
// TeamStatusMeServiceAccount
// TeamStatusMeUser
// The GraphQL type's documentation follows.
//
// Authenticated user type.
type TeamStatusMeAuthenticatedUser interface {
	implementsGraphQLInterfaceTeamStatusMeAuthenticatedUser()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *TeamStatusMeServiceAccount) implementsGraphQLInterfaceTeamStatusMeAuthenticatedUser() {}
func (v *TeamStatusMeUser) implementsGraphQLInterfaceTeamStatusMeAuthenticatedUser()           {}

func __unmarshalTeamStatusMeAuthenticatedUser(b []byte, v *TeamStatusMeAuthenticatedUser) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ServiceAccount":
		*v = new(TeamStatusMeServiceAccount)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(TeamStatusMeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AuthenticatedUser.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for TeamStatusMeAuthenticatedUser: "%v"`, tn.TypeName)
	}
}

func __marshalTeamStatusMeAuthenticatedUser(v *TeamStatusMeAuthenticatedUser) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *TeamStatusMeServiceAccount:
		typename = "ServiceAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeServiceAccount
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for TeamStatusMeAuthenticatedUser: "%T"`, v)
	}
}

// TeamStatusMeServiceAccount includes the requested fields of the GraphQL type ServiceAccount.
// The GraphQL type's documentation follows.
//
// The service account type represents machine-users of the Nais API.
//
// These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.
//
// Service accounts are created using the `createServiceAccount` mutation, and authenticate using tokens generated by the `createServiceAccountToken` mutation.
type TeamStatusMeServiceAccount struct {
	Typename string `json:"__typename"`
}

// GetTypename returns TeamStatusMeServiceAccount.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeServiceAccount) GetTypename() string { return v.Typename }

// TeamStatusMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type TeamStatusMeUser struct {
	Typename string `json:"__typename"`
	// List of teams the user is connected to.
	Teams TeamStatusMeUserTeamsTeamMemberConnection `json:"teams"`
}

// GetTypename returns TeamStatusMeUser.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUser) GetTypename() string { return v.Typename }

// GetTeams returns TeamStatusMeUser.Teams, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUser) GetTeams() TeamStatusMeUserTeamsTeamMemberConnection { return v.Teams }

// TeamStatusMeUserTeamsTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
type TeamStatusMeUserTeamsTeamMemberConnection struct {
	// List of nodes.
	Nodes []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember `json:"nodes"`
}

// GetNodes returns TeamStatusMeUserTeamsTeamMemberConnection.Nodes, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnection) GetNodes() []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember {
	return v.Nodes
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember includes the requested fields of the GraphQL type TeamMember.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember struct {
	// Team instance.
	Team TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam `json:"team"`
}

// GetTeam returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember.Team, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMember) GetTeam() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam {
	return v.Team
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam struct {
	// Unique slug of the team.
	Slug string `json:"slug"`
	// Nais workloads owned by the team.
	Total TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection `json:"total"`
	// Nais workloads owned by the team.
	NotNice TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection `json:"notNice"`
	// Nais workloads owned by the team.
	Failing TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection `json:"failing"`
}

// GetSlug returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Slug, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetSlug() string {
	return v.Slug
}

// GetTotal returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Total, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetTotal() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection {
	return v.Total
}

// GetNotNice returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.NotNice, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetNotNice() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection {
	return v.NotNice
}

// GetFailing returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Failing, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetFailing() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection {
	return v.Failing
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection includes the requested fields of the GraphQL type WorkloadConnection.
// The GraphQL type's documentation follows.
//
// Workload connection.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection struct {
	// Pagination information.
	PageInfo TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo `json:"pageInfo"`
	// List of nodes.
	Nodes []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload `json:"-"`
}

// GetPageInfo returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection) GetPageInfo() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection.Nodes, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection) GetNodes() []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload {
	return v.Nodes
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection struct {
	PageInfo TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo `json:"pageInfo"`

	Nodes []json.RawMessage `json:"nodes"`
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection) __premarshalJSON() (*__premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection, error) {
	var retval __premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection

	retval.PageInfo = v.PageInfo
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication includes the requested fields of the GraphQL type Application.
// The GraphQL type's documentation follows.
//
// An application lets you run one or more instances of a container image on the [Nais platform](https://nais.io/).
//
// Learn more about how to create and configure your applications in the [Nais documentation](https://docs.nais.io/workloads/application/).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication struct {
	Typename string `json:"__typename"`
	// Interface for workloads.
	Name string `json:"name"`
	// Interface for workloads.
	TeamEnvironment TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment `json:"teamEnvironment"`
	// Interface for workloads.
	Status TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus `json:"status"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication) GetTypename() string {
	return v.Typename
}

// GetName returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication.Name, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication) GetName() string {
	return v.Name
}

// GetTeamEnvironment returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication.TeamEnvironment, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication) GetTeamEnvironment() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment {
	return v.TeamEnvironment
}

// GetStatus returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication.Status, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication) GetStatus() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus {
	return v.Status
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob includes the requested fields of the GraphQL type Job.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob struct {
	Typename string `json:"__typename"`
	// Interface for workloads.
	Name string `json:"name"`
	// Interface for workloads.
	TeamEnvironment TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment `json:"teamEnvironment"`
	// Interface for workloads.
	Status TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus `json:"status"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob) GetTypename() string {
	return v.Typename
}

// GetName returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob.Name, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob) GetName() string {
	return v.Name
}

// GetTeamEnvironment returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob.TeamEnvironment, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob) GetTeamEnvironment() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment {
	return v.TeamEnvironment
}

// GetStatus returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob.Status, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob) GetStatus() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus {
	return v.Status
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload includes the requested fields of the GraphQL interface Workload.
//
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload is implemented by the following types:
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob
// The GraphQL type's documentation follows.
//
// Interface for workloads.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload interface {
	implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetName() string
	// GetTeamEnvironment returns the interface-field "teamEnvironment" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetTeamEnvironment() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment
	// GetStatus returns the interface-field "status" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Interface for workloads.
	GetStatus() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload() {
}

func __unmarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload(b []byte, v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Workload.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload: "%v"`, tn.TypeName)
	}
}

func __marshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload(v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesApplication
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesJob
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkload: "%T"`, v)
	}
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus includes the requested fields of the GraphQL type WorkloadStatus.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus struct {
	// State of the workload
	State WorkloadState `json:"state"`
	// Errors related to the workload
	Errors []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError `json:"-"`
}

// GetState returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus.State, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus) GetState() WorkloadState {
	return v.State
}

// GetErrors returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus.Errors, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus) GetErrors() []TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError {
	return v.Errors
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus
		Errors []json.RawMessage `json:"errors"`
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Errors
		src := firstPass.Errors
		*dst = make(
			[]TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus.Errors: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus struct {
	State WorkloadState `json:"state"`

	Errors []json.RawMessage `json:"errors"`
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus) __premarshalJSON() (*__premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus, error) {
	var retval __premarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus

	retval.State = v.State
	{

		dst := &retval.Errors
		src := v.Errors
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatus.Errors: %w", err)
			}
		}
	}
	return &retval, nil
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress includes the requested fields of the GraphQL type WorkloadStatusDeprecatedIngress.
// The GraphQL type's documentation follows.
//
// Error describing usage of a deprecated ingress
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry includes the requested fields of the GraphQL type WorkloadStatusDeprecatedRegistry.
// The GraphQL type's documentation follows.
//
// Error describing usage of a deprecated registry
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError includes the requested fields of the GraphQL interface WorkloadStatusError.
//
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError is implemented by the following types:
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion
// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable
// The GraphQL type's documentation follows.
//
// An error for a workload
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError interface {
	implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLevel returns the interface-field "level" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// An error for a workload
	GetLevel() WorkloadStatusErrorLevel
}

func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable) implementsGraphQLInterfaceTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError() {
}

func __unmarshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError(b []byte, v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "WorkloadStatusDeprecatedIngress":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusDeprecatedRegistry":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusFailedRun":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusInvalidNaisYaml":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusMissingSBOM":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusNoRunningInstances":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusSynchronizationFailing":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusUnsupportedCloudSQLVersion":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion)
		return json.Unmarshal(b, *v)
	case "WorkloadStatusVulnerable":
		*v = new(TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing WorkloadStatusError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError: "%v"`, tn.TypeName)
	}
}

func __marshalTeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError(v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress:
		typename = "WorkloadStatusDeprecatedIngress"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedIngress
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry:
		typename = "WorkloadStatusDeprecatedRegistry"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusDeprecatedRegistry
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun:
		typename = "WorkloadStatusFailedRun"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml:
		typename = "WorkloadStatusInvalidNaisYaml"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM:
		typename = "WorkloadStatusMissingSBOM"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances:
		typename = "WorkloadStatusNoRunningInstances"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing:
		typename = "WorkloadStatusSynchronizationFailing"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion:
		typename = "WorkloadStatusUnsupportedCloudSQLVersion"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion
		}{typename, v}
		return json.Marshal(result)
	case *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable:
		typename = "WorkloadStatusVulnerable"

		result := struct {
			TypeName string `json:"__typename"`
			*TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusError: "%T"`, v)
	}
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun includes the requested fields of the GraphQL type WorkloadStatusFailedRun.
// The GraphQL type's documentation follows.
//
// Error describing that the workload is failing to run
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
	// Error message
	Detail string `json:"detail"`
	// Name of the run
	Name string `json:"name"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// GetDetail returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun.Detail, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun) GetDetail() string {
	return v.Detail
}

// GetName returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun.Name, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusFailedRun) GetName() string {
	return v.Name
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml includes the requested fields of the GraphQL type WorkloadStatusInvalidNaisYaml.
// The GraphQL type's documentation follows.
//
// The last deployed YAML is invalid
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusInvalidNaisYaml) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM includes the requested fields of the GraphQL type WorkloadStatusMissingSBOM.
// The GraphQL type's documentation follows.
//
// Error describing that the workload is missing SBOM
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusMissingSBOM) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances includes the requested fields of the GraphQL type WorkloadStatusNoRunningInstances.
// The GraphQL type's documentation follows.
//
// A workload does not have any active instances, but is requested to have some
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusNoRunningInstances) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing includes the requested fields of the GraphQL type WorkloadStatusSynchronizationFailing.
// The GraphQL type's documentation follows.
//
// Error describing that the workload is failing to synchronize
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusSynchronizationFailing) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion includes the requested fields of the GraphQL type WorkloadStatusUnsupportedCloudSQLVersion.
// The GraphQL type's documentation follows.
//
// Error describing usage of an instance of Cloud SQL with a unsupported version
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusUnsupportedCloudSQLVersion) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable includes the requested fields of the GraphQL type WorkloadStatusVulnerable.
// The GraphQL type's documentation follows.
//
// Error describing that the workload is missing SBOM
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable struct {
	Typename string `json:"__typename"`
	// An error for a workload
	Level WorkloadStatusErrorLevel `json:"level"`
}

// GetTypename returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable.Typename, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable) GetTypename() string {
	return v.Typename
}

// GetLevel returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable.Level, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadStatusErrorsWorkloadStatusVulnerable) GetLevel() WorkloadStatusErrorLevel {
	return v.Level
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment includes the requested fields of the GraphQL type TeamEnvironment.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment struct {
	// Get the environment.
	Environment TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment `json:"environment"`
}

// GetEnvironment returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment.Environment, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironment) GetEnvironment() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment {
	return v.Environment
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment includes the requested fields of the GraphQL type Environment.
// The GraphQL type's documentation follows.
//
// An environment represents a runtime environment for workloads.
//
// Learn more in the [official Nais documentation](https://docs.nais.io/workloads/explanations/environment/).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment struct {
	// Unique name of the environment.
	Name string `json:"name"`
}

// GetName returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment.Name, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionNodesWorkloadTeamEnvironmentEnvironment) GetName() string {
	return v.Name
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// # This type is used for paginating the connection
//
// Learn more about how we have implemented pagination in the [GraphQL Best Practices documentation](https://graphql.org/learn/pagination/).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo struct {
	// The total amount of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo.TotalCount, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamFailingWorkloadConnectionPageInfo) GetTotalCount() int {
	return v.TotalCount
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection includes the requested fields of the GraphQL type WorkloadConnection.
// The GraphQL type's documentation follows.
//
// Workload connection.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection struct {
	// Pagination information.
	PageInfo TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo `json:"pageInfo"`
}

// GetPageInfo returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnection) GetPageInfo() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo {
	return v.PageInfo
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// # This type is used for paginating the connection
//
// Learn more about how we have implemented pagination in the [GraphQL Best Practices documentation](https://graphql.org/learn/pagination/).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo struct {
	// The total amount of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo.TotalCount, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamNotNiceWorkloadConnectionPageInfo) GetTotalCount() int {
	return v.TotalCount
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection includes the requested fields of the GraphQL type WorkloadConnection.
// The GraphQL type's documentation follows.
//
// Workload connection.
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection struct {
	// Pagination information.
	PageInfo TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo `json:"pageInfo"`
}

// GetPageInfo returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnection) GetPageInfo() TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo {
	return v.PageInfo
}

// TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// # This type is used for paginating the connection
//
// Learn more about how we have implemented pagination in the [GraphQL Best Practices documentation](https://graphql.org/learn/pagination/).
type TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo struct {
	// The total amount of items in the connection.
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo.TotalCount, and is useful for accessing the field via an interface.
func (v *TeamStatusMeUserTeamsTeamMemberConnectionNodesTeamMemberTeamTotalWorkloadConnectionPageInfo) GetTotalCount() int {
	return v.TotalCount
}

// TeamStatusResponse is returned by TeamStatus on success.
type TeamStatusResponse struct {
	// The currently authenticated user.
	Me TeamStatusMeAuthenticatedUser `json:"-"`
}

// GetMe returns TeamStatusResponse.Me, and is useful for accessing the field via an interface.
func (v *TeamStatusResponse) GetMe() TeamStatusMeAuthenticatedUser { return v.Me }

func (v *TeamStatusResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TeamStatusResponse
		Me json.RawMessage `json:"me"`
		graphql.NoUnmarshalJSON
	}
	firstPass.TeamStatusResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Me
		src := firstPass.Me
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalTeamStatusMeAuthenticatedUser(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal TeamStatusResponse.Me: %w", err)
			}
		}
	}
	return nil
}

type __premarshalTeamStatusResponse struct {
	Me json.RawMessage `json:"me"`
}

func (v *TeamStatusResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TeamStatusResponse) __premarshalJSON() (*__premarshalTeamStatusResponse, error) {
	var retval __premarshalTeamStatusResponse

	{

		dst := &retval.Me
		src := v.Me
		var err error
		*dst, err = __marshalTeamStatusMeAuthenticatedUser(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal TeamStatusResponse.Me: %w", err)
		}
	}
	return &retval, nil
}

// TeamsResponse is returned by Teams on success.
type TeamsResponse struct {
	// Get a list of teams.
	Teams TeamsTeamsTeamConnection `json:"teams"`
}

// GetTeams returns TeamsResponse.Teams, and is useful for accessing the field via an interface.
func (v *TeamsResponse) GetTeams() TeamsTeamsTeamConnection { return v.Teams }

// TeamsTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
type TeamsTeamsTeamConnection struct {
	// List of nodes.
	Nodes []TeamsTeamsTeamConnectionNodesTeam `json:"nodes"`
}

// GetNodes returns TeamsTeamsTeamConnection.Nodes, and is useful for accessing the field via an interface.
func (v *TeamsTeamsTeamConnection) GetNodes() []TeamsTeamsTeamConnectionNodesTeam { return v.Nodes }

// TeamsTeamsTeamConnectionNodesTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type TeamsTeamsTeamConnectionNodesTeam struct {
	// Unique slug of the team.
	Slug string `json:"slug"`
	// Purpose of the team.
	Purpose string `json:"purpose"`
}

// GetSlug returns TeamsTeamsTeamConnectionNodesTeam.Slug, and is useful for accessing the field via an interface.
func (v *TeamsTeamsTeamConnectionNodesTeam) GetSlug() string { return v.Slug }

// GetPurpose returns TeamsTeamsTeamConnectionNodesTeam.Purpose, and is useful for accessing the field via an interface.
func (v *TeamsTeamsTeamConnectionNodesTeam) GetPurpose() string { return v.Purpose }

// UserTeamsMeAuthenticatedUser includes the requested fields of the GraphQL interface AuthenticatedUser.
//
// UserTeamsMeAuthenticatedUser is implemented by the following types:
// UserTeamsMeServiceAccount
// UserTeamsMeUser
// The GraphQL type's documentation follows.
//
// Authenticated user type.
type UserTeamsMeAuthenticatedUser interface {
	implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *UserTeamsMeServiceAccount) implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser() {}
func (v *UserTeamsMeUser) implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser()           {}

func __unmarshalUserTeamsMeAuthenticatedUser(b []byte, v *UserTeamsMeAuthenticatedUser) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ServiceAccount":
		*v = new(UserTeamsMeServiceAccount)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(UserTeamsMeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AuthenticatedUser.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UserTeamsMeAuthenticatedUser: "%v"`, tn.TypeName)
	}
}

func __marshalUserTeamsMeAuthenticatedUser(v *UserTeamsMeAuthenticatedUser) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UserTeamsMeServiceAccount:
		typename = "ServiceAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*UserTeamsMeServiceAccount
		}{typename, v}
		return json.Marshal(result)
	case *UserTeamsMeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*UserTeamsMeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UserTeamsMeAuthenticatedUser: "%T"`, v)
	}
}

// UserTeamsMeServiceAccount includes the requested fields of the GraphQL type ServiceAccount.
// The GraphQL type's documentation follows.
//
// The service account type represents machine-users of the Nais API.
//
// These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.
//
// Service accounts are created using the `createServiceAccount` mutation, and authenticate using tokens generated by the `createServiceAccountToken` mutation.
type UserTeamsMeServiceAccount struct {
	Typename string `json:"__typename"`
}

// GetTypename returns UserTeamsMeServiceAccount.Typename, and is useful for accessing the field via an interface.
func (v *UserTeamsMeServiceAccount) GetTypename() string { return v.Typename }

// UserTeamsMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type UserTeamsMeUser struct {
	Typename string `json:"__typename"`
	// List of teams the user is connected to.
	Teams UserTeamsMeUserTeamsTeamMemberConnection `json:"teams"`
}

// GetTypename returns UserTeamsMeUser.Typename, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUser) GetTypename() string { return v.Typename }

// GetTeams returns UserTeamsMeUser.Teams, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUser) GetTeams() UserTeamsMeUserTeamsTeamMemberConnection { return v.Teams }

// UserTeamsMeUserTeamsTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
type UserTeamsMeUserTeamsTeamMemberConnection struct {
	// List of nodes.
	Nodes []UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember `json:"nodes"`
}

// GetNodes returns UserTeamsMeUserTeamsTeamMemberConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnection) GetNodes() []UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember {
	return v.Nodes
}

// UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember includes the requested fields of the GraphQL type TeamMember.
type UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember struct {
	// The role that the user has in the team.
	Role TeamMemberRole `json:"role"`
	// Team instance.
	Team UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam `json:"team"`
}

// GetRole returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember.Role, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember) GetRole() TeamMemberRole {
	return v.Role
}

// GetTeam returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember.Team, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember) GetTeam() UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam {
	return v.Team
}

// UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam struct {
	// Unique slug of the team.
	Slug string `json:"slug"`
	// Purpose of the team.
	Purpose string `json:"purpose"`
}

// GetSlug returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Slug, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetSlug() string { return v.Slug }

// GetPurpose returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Purpose, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetPurpose() string {
	return v.Purpose
}

// UserTeamsResponse is returned by UserTeams on success.
type UserTeamsResponse struct {
	// The currently authenticated user.
	Me UserTeamsMeAuthenticatedUser `json:"-"`
}

// GetMe returns UserTeamsResponse.Me, and is useful for accessing the field via an interface.
func (v *UserTeamsResponse) GetMe() UserTeamsMeAuthenticatedUser { return v.Me }

func (v *UserTeamsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserTeamsResponse
		Me json.RawMessage `json:"me"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UserTeamsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Me
		src := firstPass.Me
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUserTeamsMeAuthenticatedUser(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UserTeamsResponse.Me: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUserTeamsResponse struct {
	Me json.RawMessage `json:"me"`
}

func (v *UserTeamsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserTeamsResponse) __premarshalJSON() (*__premarshalUserTeamsResponse, error) {
	var retval __premarshalUserTeamsResponse

	{

		dst := &retval.Me
		src := v.Me
		var err error
		*dst, err = __marshalUserTeamsMeAuthenticatedUser(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UserTeamsResponse.Me: %w", err)
		}
	}
	return &retval, nil
}

// UsersResponse is returned by Users on success.
type UsersResponse struct {
	// Get a list of users.
	Users UsersUsersUserConnection `json:"users"`
}

// GetUsers returns UsersResponse.Users, and is useful for accessing the field via an interface.
func (v *UsersResponse) GetUsers() UsersUsersUserConnection { return v.Users }

// UsersUsersUserConnection includes the requested fields of the GraphQL type UserConnection.
// The GraphQL type's documentation follows.
//
// User connection.
type UsersUsersUserConnection struct {
	// List of nodes.
	Nodes []UsersUsersUserConnectionNodesUser `json:"nodes"`
}

// GetNodes returns UsersUsersUserConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UsersUsersUserConnection) GetNodes() []UsersUsersUserConnectionNodesUser { return v.Nodes }

// UsersUsersUserConnectionNodesUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type UsersUsersUserConnectionNodesUser struct {
	// The full name of the user.
	Name string `json:"name"`
	// The email address of the user.
	Email string `json:"email"`
}

// GetName returns UsersUsersUserConnectionNodesUser.Name, and is useful for accessing the field via an interface.
func (v *UsersUsersUserConnectionNodesUser) GetName() string { return v.Name }

// GetEmail returns UsersUsersUserConnectionNodesUser.Email, and is useful for accessing the field via an interface.
func (v *UsersUsersUserConnectionNodesUser) GetEmail() string { return v.Email }

// State of the workload
type WorkloadState string

const (
	// Everything is nais
	WorkloadStateNais WorkloadState = "NAIS"
	// Something is not nais
	WorkloadStateNotNais WorkloadState = "NOT_NAIS"
	// Something is failing
	WorkloadStateFailing WorkloadState = "FAILING"
	// Unknown state
	WorkloadStateUnknown WorkloadState = "UNKNOWN"
)

var AllWorkloadState = []WorkloadState{
	WorkloadStateNais,
	WorkloadStateNotNais,
	WorkloadStateFailing,
	WorkloadStateUnknown,
}

// Workload status error level
type WorkloadStatusErrorLevel string

const (
	// TODO are errors that should be fixed when possible
	WorkloadStatusErrorLevelTodo WorkloadStatusErrorLevel = "TODO"
	// WARNING are errors that should be fixed, but are not critical
	WorkloadStatusErrorLevelWarning WorkloadStatusErrorLevel = "WARNING"
	// ERROR are errors that must be fixed
	WorkloadStatusErrorLevelError WorkloadStatusErrorLevel = "ERROR"
)

var AllWorkloadStatusErrorLevel = []WorkloadStatusErrorLevel{
	WorkloadStatusErrorLevelTodo,
	WorkloadStatusErrorLevelWarning,
	WorkloadStatusErrorLevelError,
}

// __AddTeamMemberInput is used internally by genqlient
type __AddTeamMemberInput struct {
	Slug  string         `json:"slug"`
	Email string         `json:"email"`
	Role  TeamMemberRole `json:"role"`
}

// GetSlug returns __AddTeamMemberInput.Slug, and is useful for accessing the field via an interface.
func (v *__AddTeamMemberInput) GetSlug() string { return v.Slug }

// GetEmail returns __AddTeamMemberInput.Email, and is useful for accessing the field via an interface.
func (v *__AddTeamMemberInput) GetEmail() string { return v.Email }

// GetRole returns __AddTeamMemberInput.Role, and is useful for accessing the field via an interface.
func (v *__AddTeamMemberInput) GetRole() TeamMemberRole { return v.Role }

// __GetTeamWorkloadsInput is used internally by genqlient
type __GetTeamWorkloadsInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetTeamWorkloadsInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetTeamWorkloadsInput) GetSlug() string { return v.Slug }

// __RemoveTeamMemberInput is used internally by genqlient
type __RemoveTeamMemberInput struct {
	Slug  string `json:"slug"`
	Email string `json:"email"`
}

// GetSlug returns __RemoveTeamMemberInput.Slug, and is useful for accessing the field via an interface.
func (v *__RemoveTeamMemberInput) GetSlug() string { return v.Slug }

// GetEmail returns __RemoveTeamMemberInput.Email, and is useful for accessing the field via an interface.
func (v *__RemoveTeamMemberInput) GetEmail() string { return v.Email }

// __TeamMembersInput is used internally by genqlient
type __TeamMembersInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __TeamMembersInput.Slug, and is useful for accessing the field via an interface.
func (v *__TeamMembersInput) GetSlug() string { return v.Slug }

// The mutation executed by AddTeamMember.
const AddTeamMember_Operation = `
mutation AddTeamMember ($slug: Slug!, $email: String!, $role: TeamMemberRole!) {
	addTeamMember(input: {teamSlug:$slug,userEmail:$email,role:$role}) {
		member {
			role
		}
	}
}
`

func AddTeamMember(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
	email string,
	role TeamMemberRole,
) (data_ *AddTeamMemberResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "AddTeamMember",
		Query:  AddTeamMember_Operation,
		Variables: &__AddTeamMemberInput{
			Slug:  slug,
			Email: email,
			Role:  role,
		},
	}

	data_ = &AddTeamMemberResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTeamWorkloads.
const GetTeamWorkloads_Operation = `
query GetTeamWorkloads ($slug: Slug!) {
	team(slug: $slug) {
		workloads(first: 1000) {
			nodes {
				__typename
				name
				status {
					state
				}
				image {
					vulnerabilitySummary {
						total
					}
				}
				teamEnvironment {
					environment {
						name
					}
				}
			}
		}
	}
}
`

func GetTeamWorkloads(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
) (data_ *GetTeamWorkloadsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTeamWorkloads",
		Query:  GetTeamWorkloads_Operation,
		Variables: &__GetTeamWorkloadsInput{
			Slug: slug,
		},
	}

	data_ = &GetTeamWorkloadsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by IsAdmin.
const IsAdmin_Operation = `
query IsAdmin {
	me {
		__typename
		... on User {
			isAdmin
		}
	}
}
`

func IsAdmin(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *IsAdminResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "IsAdmin",
		Query:  IsAdmin_Operation,
	}

	data_ = &IsAdminResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by RemoveTeamMember.
const RemoveTeamMember_Operation = `
mutation RemoveTeamMember ($slug: Slug!, $email: String!) {
	removeTeamMember(input: {teamSlug:$slug,userEmail:$email}) {
		team {
			slug
		}
	}
}
`

func RemoveTeamMember(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
	email string,
) (data_ *RemoveTeamMemberResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "RemoveTeamMember",
		Query:  RemoveTeamMember_Operation,
		Variables: &__RemoveTeamMemberInput{
			Slug:  slug,
			Email: email,
		},
	}

	data_ = &RemoveTeamMemberResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by TeamMembers.
const TeamMembers_Operation = `
query TeamMembers ($slug: Slug!) {
	team(slug: $slug) {
		members(first: 1000) {
			nodes {
				role
				user {
					name
					email
				}
			}
		}
	}
}
`

func TeamMembers(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
) (data_ *TeamMembersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "TeamMembers",
		Query:  TeamMembers_Operation,
		Variables: &__TeamMembersInput{
			Slug: slug,
		},
	}

	data_ = &TeamMembersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by TeamStatus.
const TeamStatus_Operation = `
query TeamStatus {
	me {
		__typename
		... on User {
			teams {
				nodes {
					team {
						slug
						total: workloads(first: 1) {
							pageInfo {
								totalCount
							}
						}
						notNice: workloads(first: 1, filter: {states:[NOT_NAIS]}) {
							pageInfo {
								totalCount
							}
						}
						failing: workloads(filter: {states:[FAILING]}, orderBy: {field:STATUS,direction:DESC}) {
							pageInfo {
								totalCount
							}
							nodes {
								__typename
								name
								teamEnvironment {
									environment {
										name
									}
								}
								status {
									state
									errors {
										__typename
										level
										... on WorkloadStatusFailedRun {
											detail
											name
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func TeamStatus(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *TeamStatusResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "TeamStatus",
		Query:  TeamStatus_Operation,
	}

	data_ = &TeamStatusResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by Teams.
const Teams_Operation = `
query Teams {
	teams(first: 1000) {
		nodes {
			slug
			purpose
		}
	}
}
`

func Teams(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *TeamsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "Teams",
		Query:  Teams_Operation,
	}

	data_ = &TeamsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by UserTeams.
const UserTeams_Operation = `
query UserTeams {
	me {
		__typename
		... on User {
			teams {
				nodes {
					role
					team {
						slug
						purpose
					}
				}
			}
		}
	}
}
`

func UserTeams(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *UserTeamsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UserTeams",
		Query:  UserTeams_Operation,
	}

	data_ = &UserTeamsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by Users.
const Users_Operation = `
query Users {
	users(first: 5000) {
		nodes {
			name
			email
		}
	}
}
`

func Users(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *UsersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "Users",
		Query:  Users_Operation,
	}

	data_ = &UsersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
