// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// UserTeamsMeAuthenticatedUser includes the requested fields of the GraphQL interface AuthenticatedUser.
//
// UserTeamsMeAuthenticatedUser is implemented by the following types:
// UserTeamsMeServiceAccount
// UserTeamsMeUser
// The GraphQL type's documentation follows.
//
// Authenticated user type.
type UserTeamsMeAuthenticatedUser interface {
	implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *UserTeamsMeServiceAccount) implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser() {}
func (v *UserTeamsMeUser) implementsGraphQLInterfaceUserTeamsMeAuthenticatedUser()           {}

func __unmarshalUserTeamsMeAuthenticatedUser(b []byte, v *UserTeamsMeAuthenticatedUser) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ServiceAccount":
		*v = new(UserTeamsMeServiceAccount)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(UserTeamsMeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AuthenticatedUser.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UserTeamsMeAuthenticatedUser: "%v"`, tn.TypeName)
	}
}

func __marshalUserTeamsMeAuthenticatedUser(v *UserTeamsMeAuthenticatedUser) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UserTeamsMeServiceAccount:
		typename = "ServiceAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*UserTeamsMeServiceAccount
		}{typename, v}
		return json.Marshal(result)
	case *UserTeamsMeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*UserTeamsMeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UserTeamsMeAuthenticatedUser: "%T"`, v)
	}
}

// UserTeamsMeServiceAccount includes the requested fields of the GraphQL type ServiceAccount.
// The GraphQL type's documentation follows.
//
// The service account type represents machine-users of the Nais API.
//
// These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.
//
// Service accounts are created using the `createServiceAccount` mutation, and authenticate using tokens generated by the `createServiceAccountToken` mutation.
type UserTeamsMeServiceAccount struct {
	Typename string `json:"__typename"`
}

// GetTypename returns UserTeamsMeServiceAccount.Typename, and is useful for accessing the field via an interface.
func (v *UserTeamsMeServiceAccount) GetTypename() string { return v.Typename }

// UserTeamsMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// The user type represents a user of the Nais platform and the Nais GraphQL API.
type UserTeamsMeUser struct {
	Typename string `json:"__typename"`
	// List of teams the user is connected to.
	Teams UserTeamsMeUserTeamsTeamMemberConnection `json:"teams"`
}

// GetTypename returns UserTeamsMeUser.Typename, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUser) GetTypename() string { return v.Typename }

// GetTeams returns UserTeamsMeUser.Teams, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUser) GetTeams() UserTeamsMeUserTeamsTeamMemberConnection { return v.Teams }

// UserTeamsMeUserTeamsTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
type UserTeamsMeUserTeamsTeamMemberConnection struct {
	// List of nodes.
	Nodes []UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember `json:"nodes"`
}

// GetNodes returns UserTeamsMeUserTeamsTeamMemberConnection.Nodes, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnection) GetNodes() []UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember {
	return v.Nodes
}

// UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember includes the requested fields of the GraphQL type TeamMember.
type UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember struct {
	// Team instance.
	Team UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam `json:"team"`
}

// GetTeam returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember.Team, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMember) GetTeam() UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam {
	return v.Team
}

// UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// The team type represents a team on the [Nais platform](https://nais.io/).
//
// Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).
//
// External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
type UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam struct {
	// Unique slug of the team.
	Slug string `json:"slug"`
	// Purpose of the team.
	Purpose string `json:"purpose"`
}

// GetSlug returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Slug, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetSlug() string { return v.Slug }

// GetPurpose returns UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam.Purpose, and is useful for accessing the field via an interface.
func (v *UserTeamsMeUserTeamsTeamMemberConnectionNodesTeamMemberTeam) GetPurpose() string {
	return v.Purpose
}

// UserTeamsResponse is returned by UserTeams on success.
type UserTeamsResponse struct {
	// The currently authenticated user.
	Me UserTeamsMeAuthenticatedUser `json:"-"`
}

// GetMe returns UserTeamsResponse.Me, and is useful for accessing the field via an interface.
func (v *UserTeamsResponse) GetMe() UserTeamsMeAuthenticatedUser { return v.Me }

func (v *UserTeamsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserTeamsResponse
		Me json.RawMessage `json:"me"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UserTeamsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Me
		src := firstPass.Me
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUserTeamsMeAuthenticatedUser(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UserTeamsResponse.Me: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUserTeamsResponse struct {
	Me json.RawMessage `json:"me"`
}

func (v *UserTeamsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserTeamsResponse) __premarshalJSON() (*__premarshalUserTeamsResponse, error) {
	var retval __premarshalUserTeamsResponse

	{

		dst := &retval.Me
		src := v.Me
		var err error
		*dst, err = __marshalUserTeamsMeAuthenticatedUser(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UserTeamsResponse.Me: %w", err)
		}
	}
	return &retval, nil
}

// The query executed by UserTeams.
const UserTeams_Operation = `
query UserTeams {
	me {
		__typename
		... on User {
			teams {
				nodes {
					team {
						slug
						purpose
					}
				}
			}
		}
	}
}
`

func UserTeams(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *UserTeamsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UserTeams",
		Query:  UserTeams_Operation,
	}

	data_ = &UserTeamsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
